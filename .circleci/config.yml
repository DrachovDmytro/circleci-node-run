version: 2.1

orbs:
  # Replace this with your own!
  node-run: drachovdmytro/node-run@<<pipeline.parameters.dev-orb-version>>
  orb-tools: circleci/orb-tools@10.0
  bats: circleci/bats@1.0
  shellcheck: circleci/shellcheck@2.0

# Pipeline Parameters
## These parameters are used internally by orb-tools. Skip to the Jobs section.
parameters:
  run-integration-tests:
    description: An internal flag to prevent integration test from running before a development version has been created.
    type: boolean
    default: false
  dev-orb-version:
    description: >
      The development version of the orb to test.
      This value is automatically adjusted by the "trigger-integration-tests-workflow" job to correspond with the specific version created by the commit and should not be edited.
      A "dev:alpha" version must exist for the initial pipeline run.
    type: string
    default: "dev:alpha"

jobs:
  integration-test-1:
    docker:
      - image: cimg/node:lts
    environment:
      SOME_ENV: test
      SUB_FOLDER_NAME: 'subtest'
    steps:
      - checkout
      - node-run/script:
          step_name: Test \#1
          script: |
            assert.ok(SOME_ENV === 'test')
            await $`mkdir -p test/${SUB_FOLDER_NAME}`
            const { stdout } = $cwd`./test` && await $`ls -la`
            assert.ok(stdout.includes(SUB_FOLDER_NAME))
            EE('ENV_VAR_NAME', 1000)
            assert.ok(process.env['ENV_VAR_NAME'] === '1000')
      - node-run/script:
          step_name: Test \#1
          script: assert.ok(ENV_VAR_NAME === '1000')
      - node-run/script:
          step_name: Test \#2
          working_directory: './test'
          script: |
            const { stdout } = await $`ls -la`
            assert.ok(stdout.includes(SUB_FOLDER_NAME))
      - node-run/script:
          step_name: Test \#3
          background: true
          script: |
            setTimeout(async () => {
              await $`mkdir -p test2Folder`
            }, 1000)
      - node-run/script:
          step_name: Test \#3
          background: false
          script: |
            setTimeout(async () => {
              const { stdout } = await $`ls -la`
              assert.ok(stdout.includes('test2Folder'))
            }, 1000)
      - node-run/script:
          step_name: Test \#4
          script: |
            (async () => {
              try {
                await $`exit 1`
              } catch (err) {
                return;
              }
              throw new Error('Integration test not passed')
            })();

            (async () => {
              try {
                await $$`exit 1`
              } catch (err) {
                throw new Error('Integration test not passed')
              }
            })();
      - node-run/script:
          step_name: Test \#5
          npm_modules: |
            axios#ax
            @oclif/command#oclifc
          script: |
            const r = await ax.post('https://httpbin.org/anything', { test: 1 });
            assert.ok(r.data.json.test === 1)
            console.log(oclifc.flags)
      - node-run/script:
          step_name: Test \#6
          script: |
            stopJob()
      - run: exit 1 # Should not be executed otherwise fail job

  test-js-lib:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - run: node --unhandled-rejections=strict ./lib/test.js

workflows:
  # Prior to producing a development orb (which requires credentials) basic validation, linting, and even unit testing can be performed.
  # This workflow will run on every commit
  test-pack:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint # Lint Yaml files
      - orb-tools/pack # Pack orb source
      - test-js-lib
      - shellcheck/check:
          dir: ./src/scripts
          exclude: SC2148
      # optional: Run BATS tests against your scripts
      - bats/run:
          path: ./src/tests
      # Publish development version(s) of the orb.
      - orb-tools/publish-dev:
          orb-name: drachovdmytro/node-run
          context: orb-publishing # A restricted context containing your private publishing credentials. Will only execute if approved by an authorized user.
          requires:
            - orb-tools/lint
            - orb-tools/pack
            - bats/run
            - shellcheck/check
      # Trigger an integration workflow to test the
      # dev:${CIRCLE_SHA1:0:7} version of your orb
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          context: orb-publishing
          requires:
            - orb-tools/publish-dev

  # This `integration-test_deploy` workflow will only run
  # when the run-integration-tests pipeline parameter is set to true.
  # It is meant to be triggered by the "trigger-integration-tests-workflow"
  # job, and run tests on <your orb>@dev:${CIRCLE_SHA1:0:7}.
  integration-test_deploy:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      # Run any integration tests defined within the `jobs` key.
      - integration-test-1
      # Publish a semver version of the orb. relies on
      # the commit subject containing the text "[semver:patch|minor|major|skip]"
      # as that will determine whether a patch, minor or major
      # version will be published or if publishing should
      # be skipped.
      # e.g. [semver:patch] will cause a patch version to be published.
      - orb-tools/dev-promote-prod-from-commit-subject:
          orb-name: drachovdmytro/node-run
          context: orb-publishing
          add-pr-comment: false
          fail-if-semver-not-indicated: true
          publish-version-tag: false
          requires:
            - integration-test-1
          filters:
            branches:
              only:
                - master
                - main
